# 1.This file shows the parsed IR info when graph evaluating failed to help find the problem.
# 2.You can search the last `------------------------>` to the node which is inferred failed.
# 3.Refer to https://www.mindspore.cn/search?inputValue=analyze_fail.dat to get more instructions.
# ===============================================================================

# [No.1] 319082_318781_train_step.40935
# In file /home/dzp/dzp_is_sb/mindrl/mindrl/policy/modelfree/dqn.py(212)/        def train_step(obs, act, returns, obs_next):/
funcgraph fg_40935(
        %para1 : Tensor(F32)[64, 4]    # obs
        , %para2 : Tensor(I32)[64]    # act
        , %para3 : Tensor(F32)[64]    # returns
        , %para4 : Tensor(F32)[64, 4]    # obs_next
        , %para5 : Ref[Tensor(F32)][1]    # beta1_power
        , %para6 : Ref[Tensor(F32)][1]    # beta2_power
        , %para7 : Ref[Tensor(F32)][128, 4]    # model.model.model.0.weight
        , %para8 : Ref[Tensor(F32)][128]    # model.model.model.0.bias
        , %para9 : Ref[Tensor(F32)][128, 128]    # model.model.model.2.weight
        , %para10 : Ref[Tensor(F32)][128]    # model.model.model.2.bias
        , %para11 : Ref[Tensor(F32)][128, 128]    # model.model.model.4.weight
        , %para12 : Ref[Tensor(F32)][128]    # model.model.model.4.bias
        , %para13 : Ref[Tensor(F32)][128, 128]    # model.model.model.6.weight
        , %para14 : Ref[Tensor(F32)][128]    # model.model.model.6.bias
        , %para15 : Ref[Tensor(F32)][2, 128]    # model.model.model.8.weight
        , %para16 : Ref[Tensor(F32)][2]    # model.model.model.8.bias
        , %para17 : Ref[Tensor(F32)][128, 4]    # moment1.model.model.model.0.weight
        , %para18 : Ref[Tensor(F32)][128]    # moment1.model.model.model.0.bias
        , %para19 : Ref[Tensor(F32)][128, 128]    # moment1.model.model.model.2.weight
        , %para20 : Ref[Tensor(F32)][128]    # moment1.model.model.model.2.bias
        , %para21 : Ref[Tensor(F32)][128, 128]    # moment1.model.model.model.4.weight
        , %para22 : Ref[Tensor(F32)][128]    # moment1.model.model.model.4.bias
        , %para23 : Ref[Tensor(F32)][128, 128]    # moment1.model.model.model.6.weight
        , %para24 : Ref[Tensor(F32)][128]    # moment1.model.model.model.6.bias
        , %para25 : Ref[Tensor(F32)][2, 128]    # moment1.model.model.model.8.weight
        , %para26 : Ref[Tensor(F32)][2]    # moment1.model.model.model.8.bias
        , %para27 : Ref[Tensor(F32)][128, 4]    # moment2.model.model.model.0.weight
        , %para28 : Ref[Tensor(F32)][128]    # moment2.model.model.model.0.bias
        , %para29 : Ref[Tensor(F32)][128, 128]    # moment2.model.model.model.2.weight
        , %para30 : Ref[Tensor(F32)][128]    # moment2.model.model.model.2.bias
        , %para31 : Ref[Tensor(F32)][128, 128]    # moment2.model.model.model.4.weight
        , %para32 : Ref[Tensor(F32)][128]    # moment2.model.model.model.4.bias
        , %para33 : Ref[Tensor(F32)][128, 128]    # moment2.model.model.model.6.weight
        , %para34 : Ref[Tensor(F32)][128]    # moment2.model.model.model.6.bias
        , %para35 : Ref[Tensor(F32)][2, 128]    # moment2.model.model.model.8.weight
        , %para36 : Ref[Tensor(F32)][2]    # moment2.model.model.model.8.bias
        , %para37 : Ref[Tensor(F32)][128, 4]    # vhat.model.model.model.0.weight
        , %para38 : Ref[Tensor(F32)][128]    # vhat.model.model.model.0.bias
        , %para39 : Ref[Tensor(F32)][128, 128]    # vhat.model.model.model.2.weight
        , %para40 : Ref[Tensor(F32)][128]    # vhat.model.model.model.2.bias
        , %para41 : Ref[Tensor(F32)][128, 128]    # vhat.model.model.model.4.weight
        , %para42 : Ref[Tensor(F32)][128]    # vhat.model.model.model.4.bias
        , %para43 : Ref[Tensor(F32)][128, 128]    # vhat.model.model.model.6.weight
        , %para44 : Ref[Tensor(F32)][128]    # vhat.model.model.model.6.bias
        , %para45 : Ref[Tensor(F32)][2, 128]    # vhat.model.model.model.8.weight
        , %para46 : Ref[Tensor(F32)][2]    # vhat.model.model.model.8.bias
        , %para47 : Ref[Tensor(F32)][]    # learning_rate
        , %para48 : Ref[Tensor(I32)][1]    # global_step
    ) {
    %1 : Tensor(F32)[128, 4] = Primitive::Load{prim_type=1}(%para7, UMonad[U])    #(Ref[Tensor(F32)][128, 4], UMonad) #scope: Default
#equiv[CNode]40936

#------------------------> 0
    %2 = PrimitivePy::MatMul{prim_type=4}[output_names=["output"], transpose_a=Bool(0), input_names=["x1", "x2"], transpose_x2=Bool(1), transpose_x1=Bool(0), transpose_b=Bool(1)](%para4, %1)    #(Tensor(F32)[64, 4], Tensor(F32)[128, 4]) #scope: Default
      # In file /home/dzp/miniconda3/envs/mindrl/lib/python3.7/site-packages/mindspore/nn/layer/basic.py(462)/        x = self.matmul(x, self.weight)/#equivx
    %3 = Primitive::Load{prim_type=1}(%para8, UMonad[U])    #(Ref[Tensor(F32)][128], UMonad) #scope: Default
#equiv[CNode]40937
    %4 = PrimitivePy::BiasAdd{prim_type=1}[output_names=["output"], format="NCHW", input_names=["x", "b"]](%2, %3)    #(Undefined, Undefined) #scope: Default
      # In file /home/dzp/miniconda3/envs/mindrl/lib/python3.7/site-packages/mindspore/nn/layer/basic.py(464)/            x = self.bias_add(x, self.bias)/#equivx
    %5 = PrimitivePy::ReLU{prim_type=1}[output_names=["output"], input_names=["x"]](%4)    #(Undefined) #scope: Default
      # In file /home/dzp/miniconda3/envs/mindrl/lib/python3.7/site-packages/mindspore/nn/layer/activation.py(362)/        return self.relu(x)/#equiv[CNode]40938
    %6 = Primitive::Load{prim_type=1}(%para9, UMonad[U])    #(Ref[Tensor(F32)][128, 128], UMonad) #scope: Default
#equiv[CNode]40939
    %7 = PrimitivePy::MatMul{prim_type=4}[output_names=["output"], transpose_a=Bool(0), input_names=["x1", "x2"], transpose_x2=Bool(1), transpose_x1=Bool(0), transpose_b=Bool(1)](%5, %6)    #(Undefined, Undefined) #scope: Default
      # In file /home/dzp/miniconda3/envs/mindrl/lib/python3.7/site-packages/mindspore/nn/layer/basic.py(462)/        x = self.matmul(x, self.weight)/#equivx
    %8 = Primitive::Load{prim_type=1}(%para10, UMonad[U])    #(Ref[Tensor(F32)][128], UMonad) #scope: Default
#equiv[CNode]40940
    %9 = PrimitivePy::BiasAdd{prim_type=1}[output_names=["output"], format="NCHW", input_names=["x", "b"]](%7, %8)    #(Undefined, Undefined) #scope: Default
      # In file /home/dzp/miniconda3/envs/mindrl/lib/python3.7/site-packages/mindspore/nn/layer/basic.py(464)/            x = self.bias_add(x, self.bias)/#equivx
    %10 = PrimitivePy::ReLU{prim_type=1}[output_names=["output"], input_names=["x"]](%9)    #(Undefined) #scope: Default
      # In file /home/dzp/miniconda3/envs/mindrl/lib/python3.7/site-packages/mindspore/nn/layer/activation.py(362)/        return self.relu(x)/#equiv[CNode]40941
    %11 = Primitive::Load{prim_type=1}(%para11, UMonad[U])    #(Ref[Tensor(F32)][128, 128], UMonad) #scope: Default
#equiv[CNode]40939
    %12 = PrimitivePy::MatMul{prim_type=4}[output_names=["output"], transpose_a=Bool(0), input_names=["x1", "x2"], transpose_x2=Bool(1), transpose_x1=Bool(0), transpose_b=Bool(1)](%10, %11)    #(Undefined, Undefined) #scope: Default
      # In file /home/dzp/miniconda3/envs/mindrl/lib/python3.7/site-packages/mindspore/nn/layer/basic.py(462)/        x = self.matmul(x, self.weight)/#equivx
    %13 = Primitive::Load{prim_type=1}(%para12, UMonad[U])    #(Ref[Tensor(F32)][128], UMonad) #scope: Default
#equiv[CNode]40940
    %14 = PrimitivePy::BiasAdd{prim_type=1}[output_names=["output"], format="NCHW", input_names=["x", "b"]](%12, %13)    #(Undefined, Undefined) #scope: Default
      # In file /home/dzp/miniconda3/envs/mindrl/lib/python3.7/site-packages/mindspore/nn/layer/basic.py(464)/            x = self.bias_add(x, self.bias)/#equivx
    %15 = PrimitivePy::ReLU{prim_type=1}[output_names=["output"], input_names=["x"]](%14)    #(Undefined) #scope: Default
      # In file /home/dzp/miniconda3/envs/mindrl/lib/python3.7/site-packages/mindspore/nn/layer/activation.py(362)/        return self.relu(x)/#equiv[CNode]40942
    %16 = Primitive::Load{prim_type=1}(%para13, UMonad[U])    #(Ref[Tensor(F32)][128, 128], UMonad) #scope: Default
#equiv[CNode]40939
    %17 = PrimitivePy::MatMul{prim_type=4}[output_names=["output"], transpose_a=Bool(0), input_names=["x1", "x2"], transpose_x2=Bool(1), transpose_x1=Bool(0), transpose_b=Bool(1)](%15, %16)    #(Undefined, Undefined) #scope: Default
      # In file /home/dzp/miniconda3/envs/mindrl/lib/python3.7/site-packages/mindspore/nn/layer/basic.py(462)/        x = self.matmul(x, self.weight)/#equivx
    %18 = Primitive::Load{prim_type=1}(%para14, UMonad[U])    #(Ref[Tensor(F32)][128], UMonad) #scope: Default
#equiv[CNode]40940
    %19 = PrimitivePy::BiasAdd{prim_type=1}[output_names=["output"], format="NCHW", input_names=["x", "b"]](%17, %18)    #(Undefined, Undefined) #scope: Default
      # In file /home/dzp/miniconda3/envs/mindrl/lib/python3.7/site-packages/mindspore/nn/layer/basic.py(464)/            x = self.bias_add(x, self.bias)/#equivx
    %20 = PrimitivePy::ReLU{prim_type=1}[output_names=["output"], input_names=["x"]](%19)    #(Undefined) #scope: Default
      # In file /home/dzp/miniconda3/envs/mindrl/lib/python3.7/site-packages/mindspore/nn/layer/activation.py(362)/        return self.relu(x)/#equiv[CNode]40943
    %21 = Primitive::Load{prim_type=1}(%para15, UMonad[U])    #(Ref[Tensor(F32)][2, 128], UMonad) #scope: Default
#equiv40944
    %22 = PrimitivePy::MatMul{prim_type=4}[output_names=["output"], transpose_a=Bool(0), input_names=["x1", "x2"], transpose_x2=Bool(1), transpose_x1=Bool(0), transpose_b=Bool(1)](%20, %21)    #(Undefined, Undefined) #scope: Default
      # In file /home/dzp/miniconda3/envs/mindrl/lib/python3.7/site-packages/mindspore/nn/layer/basic.py(462)/        x = self.matmul(x, self.weight)/#equivx
    %23 = Primitive::Load{prim_type=1}(%para16, UMonad[U])    #(Ref[Tensor(F32)][2], UMonad) #scope: Default
#equiv40945
    %24 = PrimitivePy::BiasAdd{prim_type=1}[output_names=["output"], format="NCHW", input_names=["x", "b"]](%22, %23)    #(Undefined, Undefined) #scope: Default
      # In file /home/dzp/miniconda3/envs/mindrl/lib/python3.7/site-packages/mindspore/nn/layer/basic.py(464)/            x = self.bias_add(x, self.bias)/#equivx
    %25 = PrimitivePy::Cast{prim_type=2}[output_names=["output"], input_names=["x", "dst_type"], SrcT=I32, DstT=I64, dst_type=I64](%para2, I64)    #(Tensor(I32)[64], Undefined) #scope: Default
      # In file /home/dzp/miniconda3/envs/mindrl/lib/python3.7/site-packages/mindspore/ops/composite/multitype_ops/_compile_utils.py(631)/            tensor_index = F.cast(index, mstype.int64)/#equivtensor_index
    %26 = Primitive::make_list{prim_type=1}(Tensor(35)[64], %25)    #(Undefined, Undefined) #scope: Default
#40946
    %27 = PrimitivePy::Stack{prim_type=2}[output_names=["y"], dyn_input_sizes=(I64(2)), input_names=["x"], num=I64(2), axis=I64(-1), N=I64(2)](%26)    #(Undefined) #scope: Default
      # In file /home/dzp/miniconda3/envs/mindrl/lib/python3.7/site-packages/mindspore/ops/composite/multitype_ops/_compile_utils.py(663)/    indices = stack(final_index_tensors)/#equivindices
    %28 = PrimitivePy::GatherNd{prim_type=1}[output_names=["y"], input_names=["input_x", "indices"]](%24, %27)    #(Undefined, Undefined) #scope: Default
      # In file /home/dzp/miniconda3/envs/mindrl/lib/python3.7/site-packages/mindspore/ops/function/array_func.py(2461)/    return gather_nd_(input_x, indices)/#equiv[CNode]40947
    %29 = PrimitivePy::Sub{prim_type=2}[output_names=["output"], input_names=["x", "y"]](%para3, %28)    #(Tensor(F32)[64], Undefined) #scope: Default
      # In file /home/dzp/dzp_is_sb/mindrl/mindrl/policy/modelfree/dqn.py(199)/            td_error = returns - q/#equivtd_error
    %30 = PrimitivePy::Pow{prim_type=1}[output_names=["y"], input_names=["x1", "x2"]](%29, Tensor(43)[])    #(Undefined, Undefined) #scope: Default
      # In file /home/dzp/miniconda3/envs/mindrl/lib/python3.7/site-packages/mindspore/ops/function/math_func.py(644)/    return tensor_pow(x, y)/#equiv[CNode]40948
    %31 = PrimitivePy::Mul{prim_type=2}[output_names=["output"], input_names=["x", "y"]](%30, Tensor(43)[])    #(Undefined, Undefined) #scope: Default
      # In file /home/dzp/dzp_is_sb/mindrl/mindrl/policy/modelfree/dqn.py(206)/                loss = (td_error.pow(2) * weight).mean()/#equiv[CNode]40949
    %32 = PrimitivePy::ReduceMean{prim_type=2}[output_names=["y"], keep_dims=Bool(0), input_names=["input_x", "axis"]](%31, ())    #(Undefined, Undefined) #scope: Default
      # In file /home/dzp/miniconda3/envs/mindrl/lib/python3.7/site-packages/mindspore/_extends/parse/standard_method.py(83)/    return reduce_mean(x, axis)/#equiv[CNode]40950
    %33 = PrimitivePy::Pow{prim_type=1}[output_names=["y"], input_names=["x1", "x2"]](%29, Tensor(43)[])    #(Undefined, Undefined) #scope: Gradients/Default/gradPow
      # In file /home/dzp/miniconda3/envs/mindrl/lib/python3.7/site-packages/mindspore/ops/_grad/grad_math_ops.py(700)/        bc_dx = power * pow_op(x, power - 1.0) * dout/#[CNode]40951
    %34 = PrimitivePy::Mul{prim_type=2}[output_names=["output"], input_names=["x", "y"]](Tensor(43)[], %33)    #(Undefined, Undefined) #scope: Gradients/Default/gradPow
      # In file /home/dzp/miniconda3/envs/mindrl/lib/python3.7/site-packages/mindspore/ops/_grad/grad_math_ops.py(700)/        bc_dx = power * pow_op(x, power - 1.0) * dout/#[CNode]40952
    %35 = PrimitivePy::Mul{prim_type=2}[output_names=["output"], input_names=["x", "y"]](%34, Tensor(43)[64])    #(Undefined, Undefined) #scope: Gradients/Default/gradPow
      # In file /home/dzp/miniconda3/envs/mindrl/lib/python3.7/site-packages/mindspore/ops/_grad/grad_math_ops.py(700)/        bc_dx = power * pow_op(x, power - 1.0) * dout/#bc_dx
    %36 = PrimitivePy::Neg{prim_type=1}[output_names=["y"], input_names=["x"]](%35)    #(Undefined) #scope: Gradients/Default/gradSub
      # In file /home/dzp/miniconda3/envs/mindrl/lib/python3.7/site-packages/mindspore/ops/_grad/grad_math_ops.py(341)/        return binop_grad_common(x, y, dout, neg_func(dout))/#[CNode]40953
    %37 = PrimitivePy::ScatterNd{prim_type=1}[output_names=["output"], input_names=["indices", "update", "shape"]](%27, %36, (I64(64), I64(2)))    #(Undefined, Undefined, Undefined) #scope: Gradients/Default/gradGatherNd
      # In file /home/dzp/miniconda3/envs/mindrl/lib/python3.7/site-packages/mindspore/ops/_grad/grad_array_ops.py(845)/        return op(indices, dout, shp), zeros_like(indices)/#[CNode]40954
    %38 = PrimitivePy::MatMul{prim_type=4}[output_names=["output"], transpose_a=Bool(0), input_names=["x1", "x2"], transpose_x2=Bool(0), transpose_x1=Bool(0), transpose_b=Bool(0)](%37, %21)    #(Undefined, Undefined) #scope: Gradients/Default/gradMatMul
      # In file /home/dzp/miniconda3/envs/mindrl/lib/python3.7/site-packages/mindspore/ops/_grad/grad_math_ops.py(253)/            dx = mul1(dout, w)/#dx
    %39 = Primitive::ReluGrad{prim_type=1}[output_names=["output"], is_load=Bool(1), input_names=["y_backprop", "x"]](%38, %20)    #(Undefined, Undefined) #scope: Gradients/Default/gradReLU
#dx
    %40 = PrimitivePy::MatMul{prim_type=4}[output_names=["output"], transpose_a=Bool(0), input_names=["x1", "x2"], transpose_x2=Bool(0), transpose_x1=Bool(0), transpose_b=Bool(0)](%39, %16)    #(Undefined, Undefined) #scope: Gradients/Default/gradMatMul
      # In file /home/dzp/miniconda3/envs/mindrl/lib/python3.7/site-packages/mindspore/ops/_grad/grad_math_ops.py(253)/            dx = mul1(dout, w)/#dx
    %41 = Primitive::ReluGrad{prim_type=1}[output_names=["output"], is_load=Bool(1), input_names=["y_backprop", "x"]](%40, %15)    #(Undefined, Undefined) #scope: Gradients/Default/gradReLU
#dx
    %42 = PrimitivePy::MatMul{prim_type=4}[output_names=["output"], transpose_a=Bool(0), input_names=["x1", "x2"], transpose_x2=Bool(0), transpose_x1=Bool(0), transpose_b=Bool(0)](%41, %11)    #(Undefined, Undefined) #scope: Gradients/Default/gradMatMul
      # In file /home/dzp/miniconda3/envs/mindrl/lib/python3.7/site-packages/mindspore/ops/_grad/grad_math_ops.py(253)/            dx = mul1(dout, w)/#dx
    %43 = Primitive::ReluGrad{prim_type=1}[output_names=["output"], is_load=Bool(1), input_names=["y_backprop", "x"]](%42, %10)    #(Undefined, Undefined) #scope: Gradients/Default/gradReLU
#dx
    %44 = PrimitivePy::MatMul{prim_type=4}[output_names=["output"], transpose_a=Bool(0), input_names=["x1", "x2"], transpose_x2=Bool(0), transpose_x1=Bool(0), transpose_b=Bool(0)](%43, %6)    #(Undefined, Undefined) #scope: Gradients/Default/gradMatMul
      # In file /home/dzp/miniconda3/envs/mindrl/lib/python3.7/site-packages/mindspore/ops/_grad/grad_math_ops.py(253)/            dx = mul1(dout, w)/#dx
    %45 = Primitive::ReluGrad{prim_type=1}[output_names=["output"], is_load=Bool(1), input_names=["y_backprop", "x"]](%44, %5)    #(Undefined, Undefined) #scope: Gradients/Default/gradReLU
#dx
    %46 = PrimitivePy::MatMul{prim_type=4}[output_names=["output"], transpose_a=Bool(1), input_names=["x1", "x2"], transpose_x2=Bool(0), transpose_x1=Bool(1), transpose_b=Bool(0)](%45, %para4)    #(Undefined, Tensor(F32)[64, 4]) #scope: Gradients/Default/gradMatMul
      # In file /home/dzp/miniconda3/envs/mindrl/lib/python3.7/site-packages/mindspore/ops/_grad/grad_math_ops.py(255)/            dw = mul2(dout, x)/#dw
    %47 = PrimitivePy::BiasAddGrad{prim_type=1}[output_names=["output"], format="NCHW", input_names=["dout"]](%45)    #(Undefined) #scope: Gradients/Default/gradBiasAdd
      # In file /home/dzp/miniconda3/envs/mindrl/lib/python3.7/site-packages/mindspore/ops/_grad/grad_nn_ops.py(38)/        return dout, bias_grad(dout)/#[CNode]40955
    %48 = PrimitivePy::MatMul{prim_type=4}[output_names=["output"], transpose_a=Bool(1), input_names=["x1", "x2"], transpose_x2=Bool(0), transpose_x1=Bool(1), transpose_b=Bool(0)](%43, %5)    #(Undefined, Undefined) #scope: Gradients/Default/gradMatMul
      # In file /home/dzp/miniconda3/envs/mindrl/lib/python3.7/site-packages/mindspore/ops/_grad/grad_math_ops.py(255)/            dw = mul2(dout, x)/#dw
    %49 = PrimitivePy::BiasAddGrad{prim_type=1}[output_names=["output"], format="NCHW", input_names=["dout"]](%43)    #(Undefined) #scope: Gradients/Default/gradBiasAdd
      # In file /home/dzp/miniconda3/envs/mindrl/lib/python3.7/site-packages/mindspore/ops/_grad/grad_nn_ops.py(38)/        return dout, bias_grad(dout)/#[CNode]40955
    %50 = PrimitivePy::MatMul{prim_type=4}[output_names=["output"], transpose_a=Bool(1), input_names=["x1", "x2"], transpose_x2=Bool(0), transpose_x1=Bool(1), transpose_b=Bool(0)](%41, %10)    #(Undefined, Undefined) #scope: Gradients/Default/gradMatMul
      # In file /home/dzp/miniconda3/envs/mindrl/lib/python3.7/site-packages/mindspore/ops/_grad/grad_math_ops.py(255)/            dw = mul2(dout, x)/#dw
    %51 = PrimitivePy::BiasAddGrad{prim_type=1}[output_names=["output"], format="NCHW", input_names=["dout"]](%41)    #(Undefined) #scope: Gradients/Default/gradBiasAdd
      # In file /home/dzp/miniconda3/envs/mindrl/lib/python3.7/site-packages/mindspore/ops/_grad/grad_nn_ops.py(38)/        return dout, bias_grad(dout)/#[CNode]40955
    %52 = PrimitivePy::MatMul{prim_type=4}[output_names=["output"], transpose_a=Bool(1), input_names=["x1", "x2"], transpose_x2=Bool(0), transpose_x1=Bool(1), transpose_b=Bool(0)](%39, %15)    #(Undefined, Undefined) #scope: Gradients/Default/gradMatMul
      # In file /home/dzp/miniconda3/envs/mindrl/lib/python3.7/site-packages/mindspore/ops/_grad/grad_math_ops.py(255)/            dw = mul2(dout, x)/#dw
    %53 = PrimitivePy::BiasAddGrad{prim_type=1}[output_names=["output"], format="NCHW", input_names=["dout"]](%39)    #(Undefined) #scope: Gradients/Default/gradBiasAdd
      # In file /home/dzp/miniconda3/envs/mindrl/lib/python3.7/site-packages/mindspore/ops/_grad/grad_nn_ops.py(38)/        return dout, bias_grad(dout)/#[CNode]40955
    %54 = PrimitivePy::MatMul{prim_type=4}[output_names=["output"], transpose_a=Bool(1), input_names=["x1", "x2"], transpose_x2=Bool(0), transpose_x1=Bool(1), transpose_b=Bool(0)](%37, %20)    #(Undefined, Undefined) #scope: Gradients/Default/gradMatMul
      # In file /home/dzp/miniconda3/envs/mindrl/lib/python3.7/site-packages/mindspore/ops/_grad/grad_math_ops.py(255)/            dw = mul2(dout, x)/#dw
    %55 = PrimitivePy::BiasAddGrad{prim_type=1}[output_names=["output"], format="NCHW", input_names=["dout"]](%37)    #(Undefined) #scope: Gradients/Default/gradBiasAdd
      # In file /home/dzp/miniconda3/envs/mindrl/lib/python3.7/site-packages/mindspore/ops/_grad/grad_nn_ops.py(38)/        return dout, bias_grad(dout)/#[CNode]40955
    %56 = Primitive::MakeTuple{prim_type=1}(%46, %47, %48, %49, %50, %51, %52, %53, %54, %55)    #(Undefined, Undefined, Undefined, Undefined, Undefined, Undefined, Undefined, Undefined, Undefined, Undefined) #scope: Default
#[CNode]40956
    %57 = PrimitivePy::MakeTuple{prim_type=1}(%32, %56)    #(Undefined, Undefined) #scope: Default
      # In file /home/dzp/dzp_is_sb/mindrl/mindrl/policy/modelfree/dqn.py(215)/            return loss,grads/#[CNode]40957
    %58 = Primitive::Load{prim_type=1}(%para5, UMonad[U])    #(Ref[Tensor(F32)][1], UMonad) #scope: Default
#[CNode]40958
    %59 = Primitive::MakeTuple{prim_type=1}(%23, %18, %13, %8, %3, %1, %6, %11, %16, %21, %58)    #(Undefined, Undefined, Undefined, Undefined, Undefined, Tensor(F32)[128, 4], Undefined, Undefined, Undefined, Undefined, Undefined) #scope: Default
#[CNode]40959
    %60 = Primitive::UpdateState{prim_type=1}(UMonad[U], %59)    #(UMonad, Undefined) #scope: Default
#[CNode]40960
    %61 = PrimitivePy::Mul{prim_type=2}[output_names=["output"], input_names=["x", "y"]](%58, Tensor(43)[])    #(Undefined, Undefined) #scope: Default
      # In file /home/dzp/miniconda3/envs/mindrl/lib/python3.7/site-packages/mindspore/nn/optim/adam.py(543)/        beta1_power = self.beta1_power * self.beta1/#beta1_power
    %62 = PrimitivePy::Assign{prim_type=1}[output_names=["output"], side_effect_mem=Bool(1), input_names=["ref", "value"]](%para5, %61, %60)    #(Ref[Tensor(F32)][1], Undefined, Undefined) #scope: Default
      # In file /home/dzp/miniconda3/envs/mindrl/lib/python3.7/site-packages/mindspore/ops/function/parameter_func.py(55)/    return assign_(variable, value)/#[CNode]40961
    %63 = Primitive::UpdateState{prim_type=1}(%60, %62)    #(Undefined, Undefined) #scope: Default
#[CNode]40962
    %64 = Primitive::Load{prim_type=1}(%para6, %63)    #(Ref[Tensor(F32)][1], Undefined) #scope: Default
#[CNode]40963
    %65 = Primitive::UpdateState{prim_type=1}(%63, %64)    #(Undefined, Undefined) #scope: Default
#[CNode]40964
    %66 = PrimitivePy::Mul{prim_type=2}[output_names=["output"], input_names=["x", "y"]](%64, Tensor(43)[])    #(Undefined, Undefined) #scope: Default
      # In file /home/dzp/miniconda3/envs/mindrl/lib/python3.7/site-packages/mindspore/nn/optim/adam.py(545)/        beta2_power = self.beta2_power * self.beta2/#beta2_power
    %67 = PrimitivePy::Assign{prim_type=1}[output_names=["output"], side_effect_mem=Bool(1), input_names=["ref", "value"]](%para6, %66, %65)    #(Ref[Tensor(F32)][1], Undefined, Undefined) #scope: Default
      # In file /home/dzp/miniconda3/envs/mindrl/lib/python3.7/site-packages/mindspore/ops/function/parameter_func.py(55)/    return assign_(variable, value)/#[CNode]40961
    %68 = Primitive::UpdateState{prim_type=1}(%65, %67)    #(Undefined, Undefined) #scope: Default
#[CNode]40962
    %69 = PrimitivePy::Adam{prim_type=1}[side_effect_mem=Bool(1), use_nesterov=Bool(0), use_locking=Bool(0)](%para7, %para17, %para27, %61, %66, %para47, Tensor(43)[], Tensor(43)[], Tensor(43)[], %46, %68)    #(Ref[Tensor(F32)][128, 4], Ref[Tensor(F32)][128, 4], Ref[Tensor(F32)][128, 4], Undefined, Undefined, Ref[Tensor(F32)][], Undefined, Undefined, Undefined, Undefined, Undefined) #scope: Default
      # In file /home/dzp/miniconda3/envs/mindrl/lib/python3.7/site-packages/mindspore/nn/optim/adam.py(278)/            success = F.depend(success, opt(param, moment1, moment2, beta1_power, beta2_power, lr, beta1, beta2,/#[CNode]40965
    %70 = Primitive::UpdateState{prim_type=1}(%68, %69)    #(Undefined, Undefined) #scope: Default
#[CNode]40966
    %71 = PrimitivePy::Adam{prim_type=1}[side_effect_mem=Bool(1), use_nesterov=Bool(0), use_locking=Bool(0)](%para8, %para18, %para28, %61, %66, %para47, Tensor(43)[], Tensor(43)[], Tensor(43)[], %47, %70)    #(Ref[Tensor(F32)][128], Ref[Tensor(F32)][128], Ref[Tensor(F32)][128], Undefined, Undefined, Ref[Tensor(F32)][], Undefined, Undefined, Undefined, Undefined, Undefined) #scope: Default
      # In file /home/dzp/miniconda3/envs/mindrl/lib/python3.7/site-packages/mindspore/nn/optim/adam.py(278)/            success = F.depend(success, opt(param, moment1, moment2, beta1_power, beta2_power, lr, beta1, beta2,/#[CNode]40965
    %72 = Primitive::UpdateState{prim_type=1}(%70, %71)    #(Undefined, Undefined) #scope: Default
#[CNode]40967
    %73 = PrimitivePy::Adam{prim_type=1}[side_effect_mem=Bool(1), use_nesterov=Bool(0), use_locking=Bool(0)](%para9, %para19, %para29, %61, %66, %para47, Tensor(43)[], Tensor(43)[], Tensor(43)[], %48, %72)    #(Ref[Tensor(F32)][128, 128], Ref[Tensor(F32)][128, 128], Ref[Tensor(F32)][128, 128], Undefined, Undefined, Ref[Tensor(F32)][], Undefined, Undefined, Undefined, Undefined, Undefined) #scope: Default
      # In file /home/dzp/miniconda3/envs/mindrl/lib/python3.7/site-packages/mindspore/nn/optim/adam.py(278)/            success = F.depend(success, opt(param, moment1, moment2, beta1_power, beta2_power, lr, beta1, beta2,/#[CNode]40965
    %74 = Primitive::UpdateState{prim_type=1}(%72, %73)    #(Undefined, Undefined) #scope: Default
#[CNode]40968
    %75 = PrimitivePy::Adam{prim_type=1}[side_effect_mem=Bool(1), use_nesterov=Bool(0), use_locking=Bool(0)](%para10, %para20, %para30, %61, %66, %para47, Tensor(43)[], Tensor(43)[], Tensor(43)[], %49, %74)    #(Ref[Tensor(F32)][128], Ref[Tensor(F32)][128], Ref[Tensor(F32)][128], Undefined, Undefined, Ref[Tensor(F32)][], Undefined, Undefined, Undefined, Undefined, Undefined) #scope: Default
      # In file /home/dzp/miniconda3/envs/mindrl/lib/python3.7/site-packages/mindspore/nn/optim/adam.py(278)/            success = F.depend(success, opt(param, moment1, moment2, beta1_power, beta2_power, lr, beta1, beta2,/#[CNode]40965
    %76 = Primitive::UpdateState{prim_type=1}(%74, %75)    #(Undefined, Undefined) #scope: Default
#[CNode]40967
    %77 = PrimitivePy::Adam{prim_type=1}[side_effect_mem=Bool(1), use_nesterov=Bool(0), use_locking=Bool(0)](%para11, %para21, %para31, %61, %66, %para47, Tensor(43)[], Tensor(43)[], Tensor(43)[], %50, %76)    #(Ref[Tensor(F32)][128, 128], Ref[Tensor(F32)][128, 128], Ref[Tensor(F32)][128, 128], Undefined, Undefined, Ref[Tensor(F32)][], Undefined, Undefined, Undefined, Undefined, Undefined) #scope: Default
      # In file /home/dzp/miniconda3/envs/mindrl/lib/python3.7/site-packages/mindspore/nn/optim/adam.py(278)/            success = F.depend(success, opt(param, moment1, moment2, beta1_power, beta2_power, lr, beta1, beta2,/#[CNode]40965
    %78 = Primitive::UpdateState{prim_type=1}(%76, %77)    #(Undefined, Undefined) #scope: Default
#[CNode]40968
    %79 = PrimitivePy::Adam{prim_type=1}[side_effect_mem=Bool(1), use_nesterov=Bool(0), use_locking=Bool(0)](%para12, %para22, %para32, %61, %66, %para47, Tensor(43)[], Tensor(43)[], Tensor(43)[], %51, %78)    #(Ref[Tensor(F32)][128], Ref[Tensor(F32)][128], Ref[Tensor(F32)][128], Undefined, Undefined, Ref[Tensor(F32)][], Undefined, Undefined, Undefined, Undefined, Undefined) #scope: Default
      # In file /home/dzp/miniconda3/envs/mindrl/lib/python3.7/site-packages/mindspore/nn/optim/adam.py(278)/            success = F.depend(success, opt(param, moment1, moment2, beta1_power, beta2_power, lr, beta1, beta2,/#[CNode]40965
    %80 = Primitive::UpdateState{prim_type=1}(%78, %79)    #(Undefined, Undefined) #scope: Default
#[CNode]40967
    %81 = PrimitivePy::Adam{prim_type=1}[side_effect_mem=Bool(1), use_nesterov=Bool(0), use_locking=Bool(0)](%para13, %para23, %para33, %61, %66, %para47, Tensor(43)[], Tensor(43)[], Tensor(43)[], %52, %80)    #(Ref[Tensor(F32)][128, 128], Ref[Tensor(F32)][128, 128], Ref[Tensor(F32)][128, 128], Undefined, Undefined, Ref[Tensor(F32)][], Undefined, Undefined, Undefined, Undefined, Undefined) #scope: Default
      # In file /home/dzp/miniconda3/envs/mindrl/lib/python3.7/site-packages/mindspore/nn/optim/adam.py(278)/            success = F.depend(success, opt(param, moment1, moment2, beta1_power, beta2_power, lr, beta1, beta2,/#[CNode]40965
    %82 = Primitive::UpdateState{prim_type=1}(%80, %81)    #(Undefined, Undefined) #scope: Default
#[CNode]40968
    %83 = PrimitivePy::Adam{prim_type=1}[side_effect_mem=Bool(1), use_nesterov=Bool(0), use_locking=Bool(0)](%para14, %para24, %para34, %61, %66, %para47, Tensor(43)[], Tensor(43)[], Tensor(43)[], %53, %82)    #(Ref[Tensor(F32)][128], Ref[Tensor(F32)][128], Ref[Tensor(F32)][128], Undefined, Undefined, Ref[Tensor(F32)][], Undefined, Undefined, Undefined, Undefined, Undefined) #scope: Default
      # In file /home/dzp/miniconda3/envs/mindrl/lib/python3.7/site-packages/mindspore/nn/optim/adam.py(278)/            success = F.depend(success, opt(param, moment1, moment2, beta1_power, beta2_power, lr, beta1, beta2,/#[CNode]40965
    %84 = Primitive::UpdateState{prim_type=1}(%82, %83)    #(Undefined, Undefined) #scope: Default
#[CNode]40967
    %85 = PrimitivePy::Adam{prim_type=1}[side_effect_mem=Bool(1), use_nesterov=Bool(0), use_locking=Bool(0)](%para15, %para25, %para35, %61, %66, %para47, Tensor(43)[], Tensor(43)[], Tensor(43)[], %54, %84)    #(Ref[Tensor(F32)][2, 128], Ref[Tensor(F32)][2, 128], Ref[Tensor(F32)][2, 128], Undefined, Undefined, Ref[Tensor(F32)][], Undefined, Undefined, Undefined, Undefined, Undefined) #scope: Default
      # In file /home/dzp/miniconda3/envs/mindrl/lib/python3.7/site-packages/mindspore/nn/optim/adam.py(278)/            success = F.depend(success, opt(param, moment1, moment2, beta1_power, beta2_power, lr, beta1, beta2,/#[CNode]40965
    %86 = Primitive::UpdateState{prim_type=1}(%84, %85)    #(Undefined, Undefined) #scope: Default
#[CNode]40969
    %87 = PrimitivePy::Adam{prim_type=1}[side_effect_mem=Bool(1), use_nesterov=Bool(0), use_locking=Bool(0)](%para16, %para26, %para36, %61, %66, %para47, Tensor(43)[], Tensor(43)[], Tensor(43)[], %55, %86)    #(Ref[Tensor(F32)][2], Ref[Tensor(F32)][2], Ref[Tensor(F32)][2], Undefined, Undefined, Ref[Tensor(F32)][], Undefined, Undefined, Undefined, Undefined, Undefined) #scope: Default
      # In file /home/dzp/miniconda3/envs/mindrl/lib/python3.7/site-packages/mindspore/nn/optim/adam.py(278)/            success = F.depend(success, opt(param, moment1, moment2, beta1_power, beta2_power, lr, beta1, beta2,/#[CNode]40965
    %88 = Primitive::UpdateState{prim_type=1}(%86, %87)    #(Undefined, Undefined) #scope: Default
#[CNode]40970
    %89 = Primitive::Depend{prim_type=1}[side_effect_propagate=I64(1)](%57, %88)    #(Undefined, Undefined) #scope: Default
#[CNode]40971
    Primitive::Return{prim_type=1}(%89)    #(Undefined) #scope: Default
      # In file /home/dzp/dzp_is_sb/mindrl/mindrl/policy/modelfree/dqn.py(215)/            return loss,grads/#[CNode]40972
}


#===============================================================================
# num of function graphs in stack: 1
